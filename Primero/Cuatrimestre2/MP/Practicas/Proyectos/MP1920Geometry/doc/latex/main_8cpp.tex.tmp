\hypertarget{main_8cpp}{}\section{src/main.cpp File Reference}
\label{main_8cpp}\index{src/main.\+cpp@{src/main.\+cpp}}
{\ttfamily \#include $<$iostream$>$}\\*
{\ttfamily \#include $<$cmath$>$}\\*
Include dependency graph for main.\+cpp\+:
% FIG 0
\subsection*{Classes}
\begin{DoxyCompactItemize}
\item 
class \hyperlink{classPoint2D}{Point2D}
\begin{DoxyCompactList}\small\item\em To represent a point in a two-\/dimensional space. \end{DoxyCompactList}\item 
class \hyperlink{classRectangle}{Rectangle}
\begin{DoxyCompactList}\small\item\em To represent a rectangle in a two-\/dimensional space as a pair or points, the top-\/left corner and the bottom-\/right one. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\hyperlink{classRectangle}{Rectangle} \hyperlink{main_8cpp_a888d2b0113947b4461107bb02b28799d}{do\+Overlap} (const \hyperlink{classRectangle}{Rectangle} \&r1, const \hyperlink{classRectangle}{Rectangle} \&r2)
\item 
bool \hyperlink{main_8cpp_a5fe7cf71c1f13eed4b8144d0e00dc58d}{is\+Inside} (const \hyperlink{classPoint2D}{Point2D} \&p, const \hyperlink{classRectangle}{Rectangle} \&r)
\begin{DoxyCompactList}\small\item\em Calculates whether a point is internal to a rectangle. \end{DoxyCompactList}\item 
int \hyperlink{main_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4}{main} ()
\begin{DoxyCompactList}\small\item\em Main function. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
\begin{DoxyAuthor}{Author}
D\+E\+C\+S\+AI 
\end{DoxyAuthor}
\begin{DoxyNote}{Note}
To be implemented (partially) by students 
\end{DoxyNote}


\subsection{Function Documentation}
\index{main.\+cpp@{main.\+cpp}!do\+Overlap@{do\+Overlap}}
\index{do\+Overlap@{do\+Overlap}!main.\+cpp@{main.\+cpp}}
\subsubsection[{\texorpdfstring{do\+Overlap(const Rectangle \&r1, const Rectangle \&r2)}{doOverlap(const Rectangle &r1, const Rectangle &r2)}}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Rectangle} do\+Overlap (
\begin{DoxyParamCaption}
\item[{const {\bf Rectangle} \&}]{r1, }
\item[{const {\bf Rectangle} \&}]{r2}
\end{DoxyParamCaption}
)}\hypertarget{main_8cpp_a888d2b0113947b4461107bb02b28799d}{}\label{main_8cpp_a888d2b0113947b4461107bb02b28799d}

\begin{DoxyParams}{Parameters}
{\em r1} & One rectangle \\
\hline
{\em r2} & Other rectangle \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The rectangle given by the intersection of {\ttfamily r1} and {\ttfamily r2} 
\end{DoxyReturn}
\begin{DoxyNote}{Note}
This is an external function to the class \hyperlink{classRectangle}{Rectangle} but since it is also friend, this function is allowed access to private data/methods 
\end{DoxyNote}


Definition at line 287 of file main.\+cpp.


\begin{DoxyCode}
287                                                                 \{
288     \hyperlink{classRectangle}{Rectangle} result;
289     \hyperlink{classPoint2D}{Point2D} rTL, rBR;
290     \textcolor{comment}{/* NO FRIEND}
291 \textcolor{comment}{        rTL.setX(max(r1.getTopLeft().getX(),r2.getTopLeft().getX()));}
292 \textcolor{comment}{        rTL.setY(max(r1.getTopLeft().getY(),r2.getTopLeft().getY()));}
293 \textcolor{comment}{        rBR.setX(min(r1.getBottomRight().getX(),r2.getBottomRight().getX()));}
294 \textcolor{comment}{        rBR.setY(min(r1.getBottomRight().getY(),r2.getBottomRight().getY()));}
295 \textcolor{comment}{     */}
296     rTL.\hyperlink{classPoint2D_af268842e8f2e6072ffe345dc2f322046}{setX}(max(r1.topleft.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}(),r2.topleft.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}()));
297     rTL.\hyperlink{classPoint2D_a0e08240b54e6eaae92c979082da1c91c}{setY}(min(r1.topleft.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}(),r2.topleft.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}()));
298     rBR.\hyperlink{classPoint2D_af268842e8f2e6072ffe345dc2f322046}{setX}(min(r1.bottomright.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}(),r2.bottomright.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}()));
299     rBR.\hyperlink{classPoint2D_a0e08240b54e6eaae92c979082da1c91c}{setY}(max(r1.bottomright.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}(),r2.bottomright.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}()));
300     result.\hyperlink{classRectangle_a31c4b9fc0d1ddf912f114da494e50205}{setGeometry}(rTL,rBR);
301     \textcolor{keywordflow}{return} result; \textcolor{comment}{// Read more}
302 \}
\end{DoxyCode}


Here is the call graph for this function\+:
% FIG 1


\index{main.\+cpp@{main.\+cpp}!is\+Inside@{is\+Inside}}
\index{is\+Inside@{is\+Inside}!main.\+cpp@{main.\+cpp}}
\subsubsection[{\texorpdfstring{is\+Inside(const Point2\+D \&p, const Rectangle \&r)}{isInside(const Point2D &p, const Rectangle &r)}}]{\setlength{\rightskip}{0pt plus 5cm}bool is\+Inside (
\begin{DoxyParamCaption}
\item[{const {\bf Point2D} \&}]{p, }
\item[{const {\bf Rectangle} \&}]{r}
\end{DoxyParamCaption}
)}\hypertarget{main_8cpp_a5fe7cf71c1f13eed4b8144d0e00dc58d}{}\label{main_8cpp_a5fe7cf71c1f13eed4b8144d0e00dc58d}


Calculates whether a point is internal to a rectangle. 


\begin{DoxyParams}{Parameters}
{\em p} & The point \\
\hline
{\em r} & The rectangle \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}

\end{DoxyReturn}

\begin{DoxyRetVals}{Return values}
{\em true} & if {\ttfamily p} is inscribed within {\ttfamily r}, \\
\hline
{\em false} & otherwise \\
\hline
\end{DoxyRetVals}


Definition at line 305 of file main.\+cpp.


\begin{DoxyCode}
305                                                      \{
306     \textcolor{keywordflow}{return} r.\hyperlink{classRectangle_a6aeadc63b82f3c2efbbbd57041fb32e3}{getTopLeft}().\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}() <= p.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}() && p.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}()<=r.
      \hyperlink{classRectangle_aa08d26c1548936bf1e6365f08f35cb27}{getBottomRight}().\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}() &&
307            r.\hyperlink{classRectangle_a6aeadc63b82f3c2efbbbd57041fb32e3}{getTopLeft}().\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}() >= p.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}() && p.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}()>=r.
      \hyperlink{classRectangle_aa08d26c1548936bf1e6365f08f35cb27}{getBottomRight}().\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}(); 
308 \}\end{DoxyCode}


Here is the call graph for this function\+:
% FIG 2


\index{main.\+cpp@{main.\+cpp}!main@{main}}
\index{main@{main}!main.\+cpp@{main.\+cpp}}
\subsubsection[{\texorpdfstring{main()}{main()}}]{\setlength{\rightskip}{0pt plus 5cm}int main (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)}\hypertarget{main_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4}{}\label{main_8cpp_ae66f6b31b5ad750f1fe042a706a4e3d4}


Main function. 

\begin{DoxyReturn}{Returns}
Always 0 
\end{DoxyReturn}


Definition at line 166 of file main.\+cpp.


\begin{DoxyCode}
166            \{
167     \hyperlink{classRectangle}{Rectangle} A, B, Intersection;
168     \hyperlink{classPoint2D}{Point2D} p; 
169     \textcolor{keywordtype}{int} count;
170     
171     A.\hyperlink{classRectangle_a31c4b9fc0d1ddf912f114da494e50205}{setGeometry}(2,5,3,3);
172     cout << \textcolor{stringliteral}{"First rectangle is "}; 
173     A.\hyperlink{classRectangle_a035d467554bf71dc8e47ad601bbb1294}{print}();
174     cout << endl << \textcolor{stringliteral}{"Type second rectangle: "};
175     B.\hyperlink{classRectangle_af6973ed3094f9dbabeadb071772fa76d}{read}();
176     cout << endl << \textcolor{stringliteral}{"Calculating intersection of: "};
177     A.\hyperlink{classRectangle_a035d467554bf71dc8e47ad601bbb1294}{print}();
178     cout << \textcolor{stringliteral}{" and "};
179     B.\hyperlink{classRectangle_a035d467554bf71dc8e47ad601bbb1294}{print}();
180     cout << endl;
181     Intersection = \hyperlink{main_8cpp_a888d2b0113947b4461107bb02b28799d}{doOverlap}(A,B);
182     \textcolor{keywordflow}{if} (Intersection.\hyperlink{classRectangle_a85caa6e3772b83a302ff9f47d587dd83}{isEmpty}()) \{
183         cerr << \textcolor{stringliteral}{"Empty intersection"}<<endl;
184     \} \textcolor{keywordflow}{else} \{
185         cout << \textcolor{stringliteral}{"The intersection is: "};
186         Intersection.\hyperlink{classRectangle_a035d467554bf71dc8e47ad601bbb1294}{print}();
187         count = 0;
188         cout << endl << \textcolor{stringliteral}{"Reading points..."};
189         p.\hyperlink{classPoint2D_ac13d12003e2da9afee19a6a3f526c660}{read}();
190         \textcolor{keywordflow}{while} (p.\hyperlink{classPoint2D_a6cff00d11a53dc1af436225f02bc324b}{getX}()>=0 && p.\hyperlink{classPoint2D_a1b9e163b3642485c46a1f68c54d735fc}{getY}()>=0) \{
191             \textcolor{keywordflow}{if} (\hyperlink{main_8cpp_a5fe7cf71c1f13eed4b8144d0e00dc58d}{isInside}(p,Intersection)) \{
192                 p.\hyperlink{classPoint2D_ac47e5e48cf495ecd767995f6142ef3e3}{print}();
193                 count ++;
194             \} 
195             p.\hyperlink{classPoint2D_ac13d12003e2da9afee19a6a3f526c660}{read}();
196         \}
197         \textcolor{keywordflow}{if} (count > 0)
198             cout << \textcolor{stringliteral}{" fall within the intersection ("}<< count<<\textcolor{stringliteral}{" total)"} << endl;
199         \textcolor{keywordflow}{else}
200             cout << \textcolor{stringliteral}{" None of them falls within the intersection "}<<endl;
201     \}
202 
203     \textcolor{keywordflow}{return} 0;
204 \}
\end{DoxyCode}


Here is the call graph for this function\+:
% FIG 3


